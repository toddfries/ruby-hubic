#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'hubic'
require 'highline'
require 'ostruct'
require 'mime/types'


$stdout.sync = true
$stderr.sync = true

HUBIC_CLIENT_CFG = "#{ENV['HOME']}/.hubic-client"

exclusive_options = []
container = nil
user      = ENV['HUBIC_USER']

error_proc = lambda do |msg|
  $stderr.puts(msg)
  exit 1
end

verb = 1

options = OptionParser.new do |opts|
    opts.banner = "Hubic: access your data"
    opts.define_head "Usage: hubic [options] <uri|path> [file]"
    opts.separator ""
    opts.separator "Examples:"
    opts.separator "  HUBIC_USER=foo@bar.com"
    opts.separator "  hubic client   config"
    opts.separator "  hubic auth"
    opts.separator "  hubic mkdir [-p] cloud"
    opts.separator "  hubic upload     local-file.txt cloud/cloud-file.txt"
    opts.separator "  hubic md5        cloud/cloud-file.txt"
    opts.separator "  hubic download   cloud/cloud-file.txt"
    opts.separator "  hubic delete     cloud/cloud-file.txt"
    opts.separator "  hubic rm         cloud/cloud-file.txt"
    opts.separator "  hubic list [-al] cloud"
    opts.separator "  hubic ls   [-al] cloud"
    opts.separator "  hubic du         cloud"
    opts.separator ""
    opts.separator "Note:"
    opts.separator "  'hubic -c foo rm /' will delete container 'foo'"
    opts.separator "  'hubic -c foo mkdir /' will create container 'foo'"
    opts.separator ""
    opts.separator "Options:"
    
    opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
    end
    
    opts.on("-c", "--container STRING", "Use the give container as default") do  |v|
        container = v
        exclusive_options << :container
    end
    

    opts.on("-u", "--user STRING", "User account to use") do  |v|
        user = v
    end

    opts.on("-V", "--verbose", "Be verbose about action performed") do
        #require 'logger'
        #loggers << Logger.new($stdout)
        verb += 1
    end
  
    opts.on_tail("-v", "--version", "Show version") do
        puts "Hubic #{Hubic::VERSION}"
        exit
    end

end
opts = options
opts.parse!

$term = HighLine.new

action = ARGV.shift

# Manage client configuration
if action == 'client'
    case ARGV[0]
    when 'config'
        ARGV.shift
        cfg = case ARGV.length
              when 0
                  [ $term.ask("Client ID    : ").to_s,
                    $term.ask("Client Secret: ").to_s,
                    $term.ask("Redirect URI : ").to_s ]
              when 3
                  ARGV
              else
                  error_proc["hubic client config [client_id client_secret_ redirect_uri"]
              end
        File.open(HUBIC_CLIENT_CFG, 'w', 0600) {|io|
            io.write({ 'client_id'     => cfg[0],
                       'client_secret' => cfg[1],
                       'redirect_uri'  => cfg[2], }.to_yaml)
        }
        exit
    when 'reset'
        File.unlink(HUBIC_CLIENT_CFG)
        exit
    end
end


# Configure Hubic client
if ENV.include?('HUBIC_REDIRECT_URI' ) &&
   ENV.include?('HUBIC_CLIENT_ID'    ) &&
   ENV.include?('HUBIC_CLIENT_SECRET')
    Hubic.default_redirect_uri  = ENV['HUBIC_REDIRECT_URI' ]
    Hubic.default_client_id     = ENV['HUBIC_CLIENT_ID'    ]
    Hubic.default_client_secret = ENV['HUBIC_CLIENT_SECRET']
else
    begin
        cfg = YAML.load_file(HUBIC_CLIENT_CFG)
        Hubic.default_redirect_uri  = cfg['redirect_uri' ] 
        Hubic.default_client_id     = cfg['client_id'    ] 
        Hubic.default_client_secret = cfg['client_secret'] 
    rescue Errno::ENOENT
        error_proc["Plase run: hubic client config"]
    end
end

if user.nil?
    raise "User required!"
end

def du_recurse(me, patharg, container, copts)
    tsize = 0
    if container.nil?
        raise "should not call with nil container!"
    else
        entries = me.list(patharg, container)
    end
    entries.each {|path, meta|
        if patharg
            path = path.split('/')[-1]
            fullpath = "#{patharg}/#{path}"
        else
            fullpath = path
        end
        
        if meta[:type] == 'application/directory'
            type = "dir"
        elsif meta[:size] == 0
            # XXX why does :type show up as application/octet-stream for dirs?
            type = "dir"
        end
        
        if type == 'dir'    
            size = du_recurse(me, fullpath, container, copts)
            astr = '/'
        else
            size = meta[:size]
            astr = ''
        end
        tsize += size
        if copts.all
           puts "%13d hubic://%s/%s%s" % [ size, container, fullpath, astr ]
        end
    }
    tsize
end

case action
when 'auth'
    Hubic.for_user(user, ARGV[0], force: true) {|user|
        ($term.ask("Password for #{user}: ", String) {|q| q.echo = 'x' }).to_s
    }
when 'download' # hubic / local
    obj = ARGV[0]
    dst = ARGV[1] || File.basename(obj)
    Hubic.for_user(user).download(obj, dst)
when 'upload'   # local -> hubic
    foru = Hubic.for_user(user)
    if ARGV[1].nil?
        raise "Need minimum of two arguments for upload, srclist and dst"
    end
    dcount=0
    mydir=""
    myfiles = [ ]
    myfcount=0
    ARGV.each{|path|
        meta = foru.stat(path)
        if meta.nil?
            myfiles[myfcount]=path
            myfcount += 1
        else
            if meta[:type] == 'application/directory'
                dcount += 1
                mydir = path
                break unless dcount < 2
            else
                myfiles[myfcount]=path
                myfcount += 1
                if dcount > 0
                  raise "specifing files after destination dir is not going to fly"
                end
            end
        end
    }
    upcount=1
    upfmt="upload[%d]: %s -> hubic://%s/%s"
    if dcount < 1
        # foo0.jpg cloud/testdir/foo0.jpg
        src = ARGV[0]
        dst = ARGV[1]
        #if verb > 0
            str=upfmt % [ upcount, src, container, dst ]
            str = str.gsub(/\/\/\//) {|s| "//"}
            print str
        #end
        dstobj = {
            :name => dst,
            :container => container
        }
        foru.upload(src, dstobj)
        puts " done."
    elsif dcount > 1
        raise "cannot specify more than one distination dir"
    else
        # foo0.jpg foo1.jpg foo2.jpg ... cloud/testdir
        myfiles.each{|path|
            str=upfmt % [ upcount, path, container, mydir ]
            str = str.gsub(/\/\/\//) {|s| "//"}
            print str
            pbn = File.basename(path)
            dstobj = {
                :name => "#{mydir}/#{pbn}",
                :container => container
            }
            foru.upload(path, dstobj)
            puts " done."
            upcount += 1
        }
    end
when 'hcp'      # hubic copy ( 'hcp hubic://cloud/foo.jpg foo.jpg' )
    foru = Hubic.for_user(user)
    if ARGV[1].nil?
        raise "You must provide two args for hcp"
    end
    puts "to be implemented"
    # if ARGV[0] =~ hubic:// && ARGV[1] =~ localfilename
    #    foru.download(ARGV[0], ARGV[1])
    # else if ARGV[1] =~ hubic:// && ARGV[0] =~ localfilename
    #    foru.upload(ARGV[0], ARGV[1])
    # fi
when 'mkdir'
    copts = OpenStruct.new
    copts.parent = false
    OptionParser.new {|opts|
        opts.on("-p", "parent") do  |v|
            copts.parent = true
        end
    }.parse!

    if ARGV[0].nil?
        warn "You must provide the path as the first argument"
    else
        foru = Hubic.for_user(user)
        ARGV.each {|path|
            obj = {
                :name => path,
                :container => container
            }
            foru.mkdir(obj, parents: copts.parent)
        }
    end
when 'md5'
    copts = OpenStruct.new
    copts.quiet = false
    OptionParser.new {|opts|
        opts.on("-q", "quiet") do  |v|
            copts.quiet = true
        end
    }.parse!

    if ARGV[0].nil?
        raise "You must provide the path as the first argument"
    end
    foru = Hubic.for_user(user)
    ARGV.each {|path|
        obj = {
                :name => path,
                :container => container
        }
        retrycount = 0
        maxretry = 30
	loop do
            doretry = 0
            hash = foru.md5(obj)
            if hash.nil?
                hash = "<not found>"
            elsif hash.length != 32
                retrycount += 1
                next
            end
            if copts.quiet == true
                puts hash
            else
                puts "MD5 (%s) = %s" % [ path, hash ]
            end
	    break unless retrycount < maxretry && doretry == 1
            retrycount += 1
        end
    }
when 'stat'
    if ARGV[0].nil?
        raise "You must provide the path as the first argument"
    end
    foru = Hubic.for_user(user)
    ARGV.each {|path|
        obj = {
                :name => path,
                :container => container
        }

        meta = foru.stat(obj)
        if meta.nil?
            meta = {:size => 0, :etag => "<no hash, file not found       >",
                :type => "dev/null" }
        end
        puts "%12d %s %s (%s)" % [ meta[:size], meta[:etag], path, meta[:type] ]
    }
when 'list', 'ls'
    foru = Hubic.for_user(user)

    copts = OpenStruct.new
    OptionParser.new {|opts|
        opts.on("-l", "long") do  |v|
            copts.long = true
        end
        opts.on("-a", "all") do  |v|
            copts.all  = true
        end
    }.parse!

    if ARGV[0].nil?
        ARGV[0] = nil
    end
    
    ARGV.each {|path|
        if container.nil?
            entries = foru.list(path)
            container = "default"
        else
            entries = foru.list(path, container)
        end
        entries.each {|file, meta|
            if ! path.nil?
                file = file.split('/')[-1]
                fullpath = "hubic://#{container}/#{path}/#{file}"
            else
                fullpath = "hubic://#{container}/#{file}"
            end

            next if !copts.all && file[0] == ?. 

            if meta[:type] != 'application/directory'
                type = :file
            else
                type = :directory
            end
            time = meta[:lastmod].strftime("%Y-%m-%d %H:%M")
            hash = meta[:hash]
            size = meta[:size]

            astr = ''
            case type
            when :directory
                hash = '-'
                astr = '/'
                stype = 'd'
            when :file
                stype = '-'
            else
                stype = '?'
            end

            
            if copts.long
                puts "%s %-32s %13d %s %s" % [ stype, hash, size, time, fullpath ]
            else
                puts "%s%s" % [ fullpath, astr ]
            end
        }
    }
when 'df'
    foru = Hubic.for_user(user)
    acc = foru.account
    cred =  foru.credentials
    usage = foru.usage
    puts "%12s %12s %12s %s" % [ "Quota", "Available", "Used", "1k blocks" ]
    mytot = ( usage['quota'] / 1024 )
    myava = ( ( usage['quota'] - usage['used'] ) / 1024 )
    myuse = ( usage['quota'] / 1024 )
    puts "%12d %12d %12d %s %s <%s>" % [ mytot, myava, myuse,
        acc['firstname'], acc['lastname'], acc['email'] ]
    foru.containers.each {|name, meta|
       puts "%12d %12d %12d %s" % [ mytot, myava, meta[:size] / 1024, name ]
    }
when 'du'
    foru = Hubic.for_user(user)

    copts = OpenStruct.new
    OptionParser.new {|opts|
        opts.on("-a", "all") do |v|
            copts.all = true
        end
    }.parse!

    path = ARGV[0]
    mycont = container
    if mycont.nil?
        mycont = foru.get_var('default_container')
    end
        
    if path.nil?
        total_size = du_recurse(foru, "", mycont, copts)
        puts "%13d hubic://%s/" % [ total_size, mycont ]
    end
    ARGV.each {|path|
        total_size = du_recurse(foru, path, mycont, copts)
        puts "%13d hubic://%s/%s" % [ total_size, mycont, path ]
    }
when 'delete', 'rm'
    foru = Hubic.for_user(user)
    path = ARGV[0]
    if path.nil?
        raise "You must provide the path as the first argument"
    end
    ARGV.each {|path|
        obj = {
                :name => path,
                :container => container
        }
        foru.delete(obj)
    }
else
    $stderr.puts "Unknown command"
    exit(1)
end
